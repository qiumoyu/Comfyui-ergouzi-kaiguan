def is_context_empty(ctx):
    return not ctx or all(v is None for v in ctx.values())

def get_name(name):
    return '{}'.format(name)

class AnyType(str):
    def __ne__(self, __value: object) -> bool:
        return False

any_type = AnyType("*")

def is_none(value):
    if value is not None:
        if isinstance(value, dict) and 'model' in value and 'clip' in value:
            return is_context_empty(value)
    return value is None

def convert_to_int(value):
    try:
        return int(value)
    except ValueError:
        return None

def convert_to_float(value):
    try:
        return float(value)
    except ValueError:
        return None

def convert_to_str(value):
    return str(value)

class GlobalGroupConditionNode:
    """
    ÂÖ®Â±ÄÁªÑÊù°‰ª∂ÊéßÂà∂ËäÇÁÇπÔºöÊ†πÊçÆÊù°‰ª∂Âà§Êñ≠Ëá™Âä®ÊéßÂà∂ComfyUIËäÇÁÇπÁªÑÁöÑÂºÄÂÖ≥Áä∂ÊÄÅ
    - ÊîØÊåÅÂ§çÊùÇÊù°‰ª∂Âà§Êñ≠
    - Êô∫ËÉΩÊéßÂà∂ËäÇÁÇπÁªÑÁöÑÂêØÁî®/Á¶ÅÁî®/Â±èËîΩÁä∂ÊÄÅ
    - ÂèØÂêåÊó∂ÊéßÂà∂Â§ö‰∏™ÁªÑÊàñÊâÄÊúâÁªÑ
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "enable": ("BOOLEAN", {"default": True}),
                "input_value": (any_type,),
                "comparison_type": (["Á≠â‰∫é", "‰∏çÁ≠â‰∫é", "Â§ß‰∫é", "Â∞è‰∫é", "Â§ß‰∫éÁ≠â‰∫é", "Â∞è‰∫éÁ≠â‰∫é", "ÂåÖÂê´", "‰∏çÂåÖÂê´"], {"default": "Á≠â‰∫é"}),
                "comparison_value": ("STRING", {"default": ""}),
                "when_true": (["ÂêØÁî®ÁªÑ", "Á¶ÅÁî®ÁªÑ", "Â±èËîΩÁªÑ", "‰∏çÂèò"], {"default": "ÂêØÁî®ÁªÑ"}),
                "when_false": (["ÂêØÁî®ÁªÑ", "Á¶ÅÁî®ÁªÑ", "Â±èËîΩÁªÑ", "‰∏çÂèò"], {"default": "Á¶ÅÁî®ÁªÑ"}),
                "target_groups": ("STRING", {"default": "", "multiline": True, "placeholder": "ÁïôÁ©∫=ÊéßÂà∂ÊâÄÊúâÁªÑ\nÂ§ö‰∏™ÁªÑÂêçÁî®Êç¢Ë°åÂàÜÈöî"}),
                "reverse_condition": ("BOOLEAN", {"default": False}),
            },
            "optional": {},
        }

    RETURN_TYPES = (any_type, "BOOLEAN", "STRING", "STRING")
    RETURN_NAMES = ("ËæìÂá∫", "Êù°‰ª∂ÁªìÊûú", "ÊâßË°åÂä®‰Ωú", "ÂèóÊéßÁªÑÂàóË°®")
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, enable, input_value, comparison_type, comparison_value, 
                when_true, when_false, target_groups, reverse_condition):
        
        # Â¶ÇÊûúËäÇÁÇπË¢´Á¶ÅÁî®ÔºåÁõ¥Êé•‰º†ÈÄíËæìÂÖ•
        if not enable:
            return (input_value, False, "ËäÇÁÇπÂ∑≤Á¶ÅÁî®", "Êó†")
        
        # ÊâßË°åÊù°‰ª∂Âà§Êñ≠
        condition_result = self._evaluate_condition(input_value, comparison_type, comparison_value)
        
        # ÊòØÂê¶ÂèçËΩ¨Êù°‰ª∂
        if reverse_condition:
            condition_result = not condition_result
        
        # Ê†πÊçÆÊù°‰ª∂ÁªìÊûúÈÄâÊã©Âä®‰Ωú
        action = when_true if condition_result else when_false
        
        # Ëß£ÊûêÁõÆÊ†áÁªÑ
        target_group_list = self._parse_target_groups(target_groups)
        
        # ÊâßË°åÁªÑÊéßÂà∂ÔºàËøôÈáåÂè™ÊòØËøîÂõûÊéßÂà∂‰ø°ÊÅØÔºåÂÆûÈôÖÊéßÂà∂Âú®ÂâçÁ´ØJavaScript‰∏≠ÂÆåÊàêÔºâ
        control_info = {
            'action': action,
            'groups': target_group_list,
            'condition_result': condition_result
        }
        
        # ÁîüÊàêÂèóÊéßÁªÑÂàóË°®ÊèèËø∞
        groups_desc = "ÊâÄÊúâÁªÑ" if not target_group_list else ", ".join(target_group_list)
        
        # Ë∞ÉËØïËæìÂá∫
        print(f"üåê ÂÖ®Â±ÄÁªÑÊù°‰ª∂ÊéßÂà∂: ËæìÂÖ•={input_value}, Êù°‰ª∂={condition_result}, Âä®‰Ωú={action}, ÁõÆÊ†á={groups_desc}")
        
        return (input_value, condition_result, action, groups_desc)
    
    def _evaluate_condition(self, input_value, comparison_type, comparison_value):
        """Êù°‰ª∂Âà§Êñ≠Ê†∏ÂøÉÈÄªËæë"""
        
        # Êï∞ÊçÆÁ±ªÂûãÊô∫ËÉΩËΩ¨Êç¢
        if isinstance(input_value, str):
            input_str = input_value
            input_int = convert_to_int(input_value)
            input_float = convert_to_float(input_value)
        else:
            input_str = convert_to_str(input_value)
            input_int = convert_to_int(input_str) if input_value is not None else None
            input_float = convert_to_float(input_str) if input_value is not None else None
        
        # ÊØîËæÉÂÄºËΩ¨Êç¢
        comp_str = comparison_value
        comp_int = convert_to_int(comparison_value)
        comp_float = convert_to_float(comparison_value)
        
        # ÊâßË°åÊØîËæÉÊìç‰Ωú
        try:
            if comparison_type == "Á≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int == comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float == comp_float
                else:
                    return input_str == comp_str
            
            elif comparison_type == "‰∏çÁ≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int != comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float != comp_float
                else:
                    return input_str != comp_str
            
            elif comparison_type == "Â§ß‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int > comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float > comp_float
                else:
                    return input_str > comp_str
            
            elif comparison_type == "Â∞è‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int < comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float < comp_float
                else:
                    return input_str < comp_str
            
            elif comparison_type == "Â§ß‰∫éÁ≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int >= comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float >= comp_float
                else:
                    return input_str >= comp_str
            
            elif comparison_type == "Â∞è‰∫éÁ≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int <= comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float <= comp_float
                else:
                    return input_str <= comp_str
            
            elif comparison_type == "ÂåÖÂê´":
                return comp_str in input_str
            
            elif comparison_type == "‰∏çÂåÖÂê´":
                return comp_str not in input_str
            
        except Exception as e:
            print(f"üåê Êù°‰ª∂Âà§Êñ≠ÈîôËØØ: {e}")
            return False
        
        return False
    
    def _parse_target_groups(self, target_groups):
        """Ëß£ÊûêÁõÆÊ†áÁªÑÂàóË°®"""
        if not target_groups or not target_groups.strip():
            return []  # Á©∫ÂàóË°®Ë°®Á§∫ÊéßÂà∂ÊâÄÊúâÁªÑ
        
        return [group.strip() for group in target_groups.split('\n') if group.strip()]


class SmartGroupSwitchNode:
    """
    Êô∫ËÉΩÁªÑÂºÄÂÖ≥ËäÇÁÇπÔºöÁÆÄÂåñÁâàÁöÑÁªÑÊéßÂà∂ËäÇÁÇπ
    Áõ¥Êé•Êé•ÂèóÂ∏ÉÂ∞îËæìÂÖ•Êù•ÊéßÂà∂ÁªÑÂºÄÂÖ≥
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "enable_group": ("BOOLEAN", {"default": True}),
                "group_names": ("STRING", {"default": "", "multiline": True, "placeholder": "Ë¶ÅÊéßÂà∂ÁöÑÁªÑÂêç\nÂ§ö‰∏™ÁªÑÁî®Êç¢Ë°åÂàÜÈöî\nÁïôÁ©∫=ÊéßÂà∂ÊâÄÊúâÁªÑ"}),
                "switch_mode": (["ÂºÄÂêØ", "ÂÖ≥Èó≠", "Â±èËîΩ"], {"default": "ÂºÄÂêØ"}),
            },
            "optional": {},
        }

    RETURN_TYPES = ("BOOLEAN", "STRING")
    RETURN_NAMES = ("ÁªÑÁä∂ÊÄÅ", "Êìç‰ΩúÁªìÊûú")
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, enable_group, group_names, switch_mode):
        # Ëß£ÊûêÁªÑÂêç
        if group_names.strip():
            groups = [g.strip() for g in group_names.split('\n') if g.strip()]
            groups_desc = ", ".join(groups)
        else:
            groups = []
            groups_desc = "ÊâÄÊúâÁªÑ"
        
        # Ê†πÊçÆÊ®°ÂºèÁ°ÆÂÆöÊìç‰Ωú
        action_map = {
            "ÂºÄÂêØ": "ÂêØÁî®ÁªÑ",
            "ÂÖ≥Èó≠": "Á¶ÅÁî®ÁªÑ", 
            "Â±èËîΩ": "Â±èËîΩÁªÑ"
        }
        action = action_map[switch_mode]
        
        result = f"{action}: {groups_desc}"
        
        print(f"üéØ Êô∫ËÉΩÁªÑÂºÄÂÖ≥: {result}")
        
        return (enable_group, result)


NODE_CLASS_MAPPINGS = {
    "GlobalGroupConditionNode": GlobalGroupConditionNode,
    "SmartGroupSwitchNode": SmartGroupSwitchNode
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "GlobalGroupConditionNode": "ÂÖ®Â±ÄÁªÑÊù°‰ª∂ÊéßÂà∂üåêüîÄ",
    "SmartGroupSwitchNode": "Êô∫ËÉΩÁªÑÂºÄÂÖ≥üéØ"
} 