def is_context_empty(ctx):
    return not ctx or all(v is None for v in ctx.values())

def get_name(name):
    return '{}'.format(name)

class AnyType(str):
    def __ne__(self, __value: object) -> bool:
        return False

any_type = AnyType("*")

def is_none(value):
    if value is not None:
        if isinstance(value, dict) and 'model' in value and 'clip' in value:
            return is_context_empty(value)
    return value is None

def convert_to_int(value):
    try:
        return int(value)
    except ValueError:
        return None

def convert_to_float(value):
    try:
        return float(value)
    except ValueError:
        return None

def convert_to_str(value):
    return str(value)

class GlobalGroupConditionNode:
    """
    ÂÖ®Â±ÄÁªÑÊù°‰ª∂ÊéßÂà∂ËäÇÁÇπÔºöÊ†πÊçÆÊù°‰ª∂Âà§Êñ≠Ëá™Âä®ÊéßÂà∂ComfyUIËäÇÁÇπÁªÑÁöÑÂºÄÂÖ≥Áä∂ÊÄÅ
    - ÊîØÊåÅÂ§çÊùÇÊù°‰ª∂Âà§Êñ≠
    - Êô∫ËÉΩÊéßÂà∂ËäÇÁÇπÁªÑÁöÑÂêØÁî®/Á¶ÅÁî®/Â±èËîΩÁä∂ÊÄÅ
    - ÂèØÂêåÊó∂ÊéßÂà∂Â§ö‰∏™ÁªÑÊàñÊâÄÊúâÁªÑ
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "enable": ("BOOLEAN", {"default": True}),
                "input_value": (any_type,),
                "comparison_type": (["Á≠â‰∫é", "‰∏çÁ≠â‰∫é", "Â§ß‰∫é", "Â∞è‰∫é", "Â§ß‰∫éÁ≠â‰∫é", "Â∞è‰∫éÁ≠â‰∫é", "ÂåÖÂê´", "‰∏çÂåÖÂê´"], {"default": "Á≠â‰∫é"}),
                "comparison_value": ("STRING", {"default": ""}),
                "when_true": (["ÂêØÁî®ÁªÑ", "Á¶ÅÁî®ÁªÑ", "Â±èËîΩÁªÑ", "‰∏çÂèò"], {"default": "ÂêØÁî®ÁªÑ"}),
                "when_false": (["ÂêØÁî®ÁªÑ", "Á¶ÅÁî®ÁªÑ", "Â±èËîΩÁªÑ", "‰∏çÂèò"], {"default": "Á¶ÅÁî®ÁªÑ"}),
                "target_groups": ("STRING", {"default": "", "multiline": True, "placeholder": "ÁïôÁ©∫=ÊéßÂà∂ÊâÄÊúâÁªÑ\nÂ§ö‰∏™ÁªÑÂêçÁî®Êç¢Ë°åÂàÜÈöî"}),
                "reverse_condition": ("BOOLEAN", {"default": False}),
            },
            "optional": {},
        }

    RETURN_TYPES = (any_type, "BOOLEAN", "STRING", "STRING")
    RETURN_NAMES = ("ËæìÂá∫", "Êù°‰ª∂ÁªìÊûú", "ÊâßË°åÂä®‰Ωú", "ÂèóÊéßÁªÑÂàóË°®")
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, enable, input_value, comparison_type, comparison_value, 
                when_true, when_false, target_groups, reverse_condition):
        
        # Â¶ÇÊûúËäÇÁÇπË¢´Á¶ÅÁî®ÔºåÁõ¥Êé•‰º†ÈÄíËæìÂÖ•
        if not enable:
            return (input_value, False, "ËäÇÁÇπÂ∑≤Á¶ÅÁî®", "Êó†")
        
        # ÊâßË°åÊù°‰ª∂Âà§Êñ≠
        condition_result = self._evaluate_condition(input_value, comparison_type, comparison_value)
        
        # ÊòØÂê¶ÂèçËΩ¨Êù°‰ª∂
        if reverse_condition:
            condition_result = not condition_result
        
        # Ê†πÊçÆÊù°‰ª∂ÁªìÊûúÈÄâÊã©Âä®‰Ωú
        action = when_true if condition_result else when_false
        
        # Ëß£ÊûêÁõÆÊ†áÁªÑ
        target_group_list = self._parse_target_groups(target_groups)
        
        # ÊâßË°åÁªÑÊéßÂà∂ÔºàËøôÈáåÂè™ÊòØËøîÂõûÊéßÂà∂‰ø°ÊÅØÔºåÂÆûÈôÖÊéßÂà∂Âú®ÂâçÁ´ØJavaScript‰∏≠ÂÆåÊàêÔºâ
        control_info = {
            'action': action,
            'groups': target_group_list,
            'condition_result': condition_result
        }
        
        # ÁîüÊàêÂèóÊéßÁªÑÂàóË°®ÊèèËø∞
        groups_desc = "ÊâÄÊúâÁªÑ" if not target_group_list else ", ".join(target_group_list)
        
        # Ë∞ÉËØïËæìÂá∫
        print(f"üåê ÂÖ®Â±ÄÁªÑÊù°‰ª∂ÊéßÂà∂: ËæìÂÖ•={input_value}, Êù°‰ª∂={condition_result}, Âä®‰Ωú={action}, ÁõÆÊ†á={groups_desc}")
        
        return (input_value, condition_result, action, groups_desc)
    
    def _evaluate_condition(self, input_value, comparison_type, comparison_value):
        """Êù°‰ª∂Âà§Êñ≠Ê†∏ÂøÉÈÄªËæë"""
        
        # Êï∞ÊçÆÁ±ªÂûãÊô∫ËÉΩËΩ¨Êç¢
        if isinstance(input_value, str):
            input_str = input_value
            input_int = convert_to_int(input_value)
            input_float = convert_to_float(input_value)
        else:
            input_str = convert_to_str(input_value)
            input_int = convert_to_int(input_str) if input_value is not None else None
            input_float = convert_to_float(input_str) if input_value is not None else None
        
        # ÊØîËæÉÂÄºËΩ¨Êç¢
        comp_str = comparison_value
        comp_int = convert_to_int(comparison_value)
        comp_float = convert_to_float(comparison_value)
        
        # ÊâßË°åÊØîËæÉÊìç‰Ωú
        try:
            if comparison_type == "Á≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int == comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float == comp_float
                else:
                    return input_str == comp_str
            
            elif comparison_type == "‰∏çÁ≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int != comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float != comp_float
                else:
                    return input_str != comp_str
            
            elif comparison_type == "Â§ß‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int > comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float > comp_float
                else:
                    return input_str > comp_str
            
            elif comparison_type == "Â∞è‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int < comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float < comp_float
                else:
                    return input_str < comp_str
            
            elif comparison_type == "Â§ß‰∫éÁ≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int >= comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float >= comp_float
                else:
                    return input_str >= comp_str
            
            elif comparison_type == "Â∞è‰∫éÁ≠â‰∫é":
                if comp_int is not None and input_int is not None:
                    return input_int <= comp_int
                elif comp_float is not None and input_float is not None:
                    return input_float <= comp_float
                else:
                    return input_str <= comp_str
            
            elif comparison_type == "ÂåÖÂê´":
                return comp_str in input_str
            
            elif comparison_type == "‰∏çÂåÖÂê´":
                return comp_str not in input_str
            
        except Exception as e:
            print(f"üåê Êù°‰ª∂Âà§Êñ≠ÈîôËØØ: {e}")
            return False
        
        return False
    
    def _parse_target_groups(self, target_groups):
        """Ëß£ÊûêÁõÆÊ†áÁªÑÂàóË°®"""
        if not target_groups or not target_groups.strip():
            return []  # Á©∫ÂàóË°®Ë°®Á§∫ÊéßÂà∂ÊâÄÊúâÁªÑ
        
        return [group.strip() for group in target_groups.split('\n') if group.strip()]


class SmartGroupSwitchNode:
    """
    Êô∫ËÉΩÁªÑÂºÄÂÖ≥ËäÇÁÇπÔºöÁÆÄÂåñÁâàÁöÑÁªÑÊéßÂà∂ËäÇÁÇπ
    ÊîØÊåÅÊâãÂä®ËÆæÁΩÆÂíåÂä®ÊÄÅÊé•Êî∂ÁªÑÂêçÊù•ÊéßÂà∂ÁªÑÂºÄÂÖ≥
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "enable_group": ("BOOLEAN", {"default": True}),
                "switch_mode": (["ÂºÄÂêØ", "ÂÖ≥Èó≠", "Â±èËîΩ"], {"default": "ÂºÄÂêØ"}),
                "group_names": ("STRING", {"default": "", "multiline": True, "placeholder": "ÊâãÂä®ËæìÂÖ•ÁªÑÂêç\nÂ§ö‰∏™ÁªÑÁî®Êç¢Ë°åÂàÜÈöî\nÁïôÁ©∫=ÊéßÂà∂ÊâÄÊúâÁªÑ"}),
            },
            "optional": {
                "dynamic_group_names": (any_type, {"tooltip": "Âä®ÊÄÅËæìÂÖ•ÁªÑÂêçÔºåÊîØÊåÅÂ≠óÁ¨¶‰∏≤ÊàñÂàóË°®Ê†ºÂºè"}),
            },
        }

    RETURN_TYPES = ("BOOLEAN", "STRING", "STRING")
    RETURN_NAMES = ("ÁªÑÁä∂ÊÄÅ", "Êìç‰ΩúÁªìÊûú", "ÂèóÊéßÁªÑÂàóË°®")
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, enable_group, switch_mode, group_names, dynamic_group_names=None):
        
        if not enable_group:
            return (False, "ËäÇÁÇπÂ∑≤Á¶ÅÁî®", "Êó†")
        
        # Ëß£ÊûêÁªÑÂêçÔºö‰ºòÂÖà‰ΩøÁî®Âä®ÊÄÅËæìÂÖ•ÔºåÂÖ∂Ê¨°‰ΩøÁî®ÊâãÂä®ËæìÂÖ•
        final_groups = self._parse_group_names(group_names, dynamic_group_names)
        
        # Ê†πÊçÆÊ®°ÂºèÁ°ÆÂÆöÊìç‰Ωú
        action_map = {
            "ÂºÄÂêØ": "ÂêØÁî®ÁªÑ",
            "ÂÖ≥Èó≠": "Á¶ÅÁî®ÁªÑ", 
            "Â±èËîΩ": "Â±èËîΩÁªÑ"
        }
        action = action_map[switch_mode]
        
        # ÁîüÊàêÁªÑÂàóË°®ÊèèËø∞
        if final_groups:
            groups_desc = ", ".join(final_groups)
            groups_list_desc = f"ÊåáÂÆöÁªÑ: {groups_desc}"
        else:
            groups_desc = "ÊâÄÊúâÁªÑ"
            groups_list_desc = "ÊâÄÊúâÁªÑ"
        
        result = f"{action}: {groups_desc}"
        
        print(f"üéØ Êô∫ËÉΩÁªÑÂºÄÂÖ≥: {result}")
        print(f"   ÂèóÊéßÁªÑËØ¶ÊÉÖ: {groups_list_desc}")
        
        return (enable_group, result, groups_list_desc)
    
    def _parse_group_names(self, manual_groups, dynamic_groups):
        """Ëß£ÊûêÁªÑÂêçÔºåÊîØÊåÅÂ§öÁßçËæìÂÖ•Ê†ºÂºè"""
        
        final_groups = []
        
        # 1. ‰ºòÂÖàÂ§ÑÁêÜÂä®ÊÄÅËæìÂÖ•ÁöÑÁªÑÂêç
        if dynamic_groups is not None:
            dynamic_parsed = self._parse_dynamic_input(dynamic_groups)
            if dynamic_parsed:
                final_groups.extend(dynamic_parsed)
                print(f"üéØ ‰ΩøÁî®Âä®ÊÄÅÁªÑÂêç: {dynamic_parsed}")
        
        # 2. Â¶ÇÊûúÊ≤°ÊúâÂä®ÊÄÅËæìÂÖ•Ôºå‰ΩøÁî®ÊâãÂä®ËæìÂÖ•
        if not final_groups and manual_groups and manual_groups.strip():
            manual_parsed = [g.strip() for g in manual_groups.split('\n') if g.strip()]
            final_groups.extend(manual_parsed)
            print(f"üéØ ‰ΩøÁî®ÊâãÂä®ÁªÑÂêç: {manual_parsed}")
        
        return final_groups
    
    def _parse_dynamic_input(self, dynamic_input):
        """Ëß£ÊûêÂä®ÊÄÅËæìÂÖ•ÔºåÊîØÊåÅÂ§öÁßçÊ†ºÂºè"""
        
        if dynamic_input is None:
            return []
        
        try:
            # 1. Â¶ÇÊûúÊòØÂàóË°®Ê†ºÂºè
            if isinstance(dynamic_input, (list, tuple)):
                return [str(item).strip() for item in dynamic_input if str(item).strip()]
            
            # 2. Â¶ÇÊûúÊòØÂ≠óÁ¨¶‰∏≤Ê†ºÂºè
            elif isinstance(dynamic_input, str):
                if dynamic_input.strip():
                    # ÊîØÊåÅÂ§öÁßçÂàÜÈöîÁ¨¶ÔºöÊç¢Ë°å„ÄÅÈÄóÂè∑„ÄÅÂàÜÂè∑
                    if '\n' in dynamic_input:
                        return [g.strip() for g in dynamic_input.split('\n') if g.strip()]
                    elif ',' in dynamic_input:
                        return [g.strip() for g in dynamic_input.split(',') if g.strip()]
                    elif ';' in dynamic_input:
                        return [g.strip() for g in dynamic_input.split(';') if g.strip()]
                    else:
                        return [dynamic_input.strip()]
            
            # 3. ÂÖ∂‰ªñÁ±ªÂûãËΩ¨Â≠óÁ¨¶‰∏≤Â§ÑÁêÜ
            else:
                str_input = str(dynamic_input).strip()
                if str_input:
                    return [str_input]
        
        except Exception as e:
            print(f"üéØ Âä®ÊÄÅÁªÑÂêçËß£ÊûêÈîôËØØ: {e}")
        
        return []


class AdvancedGroupSwitchNode:
    """
    È´òÁ∫ßÁªÑÂºÄÂÖ≥ËäÇÁÇπÔºöÊîØÊåÅÊõ¥Â§çÊùÇÁöÑÁªÑÊéßÂà∂ÈÄªËæë
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "enable": ("BOOLEAN", {"default": True}),
                "control_mode": (["ÂçïÁªÑÊéßÂà∂", "Â§öÁªÑÊéßÂà∂", "ÂÖ®ÁªÑÊéßÂà∂"], {"default": "ÂçïÁªÑÊéßÂà∂"}),
            },
            "optional": {
                "group_name": ("STRING", {"default": "", "placeholder": "Âçï‰∏™ÁªÑÂêç"}),
                "group_list": (any_type, {"tooltip": "ÁªÑÂêçÂàóË°®ÔºåÊîØÊåÅÂ≠óÁ¨¶‰∏≤ÊàñÂàóË°®Ê†ºÂºè"}),
                "enable_action": (["ÂêØÁî®", "Á¶ÅÁî®", "Â±èËîΩ"], {"default": "ÂêØÁî®"}),
                "disable_action": (["ÂêØÁî®", "Á¶ÅÁî®", "Â±èËîΩ"], {"default": "Á¶ÅÁî®"}),
                "apply_enable": ("BOOLEAN", {"default": True}),
            },
        }

    RETURN_TYPES = ("STRING", "STRING", "BOOLEAN")
    RETURN_NAMES = ("ÊéßÂà∂ÁªìÊûú", "ÁªÑÂàóË°®", "ÊâßË°åÁä∂ÊÄÅ")
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, enable, control_mode, group_name="", group_list=None, 
                enable_action="ÂêØÁî®", disable_action="Á¶ÅÁî®", apply_enable=True):
        
        if not enable:
            return ("ËäÇÁÇπÂ∑≤Á¶ÅÁî®", "Êó†", False)
        
        # Ê†πÊçÆÊéßÂà∂Ê®°ÂºèÁ°ÆÂÆöÁõÆÊ†áÁªÑ
        target_groups = []
        
        if control_mode == "ÂçïÁªÑÊéßÂà∂":
            if group_name.strip():
                target_groups = [group_name.strip()]
        elif control_mode == "Â§öÁªÑÊéßÂà∂":
            if group_list is not None:
                target_groups = self._parse_group_list(group_list)
        # ÂÖ®ÁªÑÊéßÂà∂Êó∂ target_groups ‰øùÊåÅÁ©∫ÂàóË°®
        
        # Á°ÆÂÆöÊâßË°åÁöÑÂä®‰Ωú
        action = f"{enable_action}ÁªÑ" if apply_enable else f"{disable_action}ÁªÑ"
        
        # ÁîüÊàêÁªìÊûúÊèèËø∞
        if target_groups:
            groups_desc = ", ".join(target_groups)
            result = f"{action}: {groups_desc}"
        else:
            groups_desc = "ÊâÄÊúâÁªÑ"
            result = f"{action}: ÊâÄÊúâÁªÑ"
        
        print(f"üîß È´òÁ∫ßÁªÑÂºÄÂÖ≥: {result}")
        
        return (result, groups_desc, True)
    
    def _parse_group_list(self, group_list):
        """Ëß£ÊûêÁªÑÂàóË°®"""
        if group_list is None:
            return []
        
        try:
            if isinstance(group_list, (list, tuple)):
                return [str(item).strip() for item in group_list if str(item).strip()]
            elif isinstance(group_list, str):
                if ',' in group_list:
                    return [g.strip() for g in group_list.split(',') if g.strip()]
                elif '\n' in group_list:
                    return [g.strip() for g in group_list.split('\n') if g.strip()]
                else:
                    return [group_list.strip()] if group_list.strip() else []
        except:
            pass
        
        return []


class FlowBypassGroupNode:
    """
    ÊµÅÁ®ãÂ±èËîΩÁªÑËäÇÁÇπÔºöÊé•Êî∂ÊµÅÁ®ãËæìÂÖ•ÔºåÂ±èËîΩÊåáÂÆöÁöÑÁªÑ
    ËøôÊòØ‰∏Ä‰∏™ÂéüÂ≠êÂäüËÉΩËäÇÁÇπÔºå‰∏ìÈó®Áî®‰∫éÂú®ÊµÅÁ®ã‰∏≠Â±èËîΩÁªÑ
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "flow_input": (any_type,),  # Êé•Êî∂ÊµÅÁ®ãËæìÂÖ•
                "groups_to_bypass": ("STRING", {"multiline": True, "placeholder": "Ë¶ÅÂ±èËîΩÁöÑÁªÑÂêçÔºåÊîØÊåÅÂ§öÁßçÂàÜÂâ≤ÊñπÂºèÔºö\n‚Ä¢ Êç¢Ë°åÔºöÁªÑ1\\nÁªÑ2\n‚Ä¢ ÈÄóÂè∑ÔºöÁªÑ1,ÁªÑ2\n‚Ä¢ ÂàÜÂè∑ÔºöÁªÑ1;ÁªÑ2\n‚Ä¢ Á´ñÁ∫øÔºöÁªÑ1|ÁªÑ2\n‚Ä¢ Á©∫Ê†ºÔºöÁªÑ1 ÁªÑ2\n‚Ä¢ Ê∑∑ÂêàÔºöËá™Âä®ËØÜÂà´"}),
            },
            "optional": {},
        }

    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("ËæìÂá∫",)
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, flow_input, groups_to_bypass):
        """
        Ê†∏ÂøÉÂäüËÉΩÔºöÂ±èËîΩÊåáÂÆöÁªÑÔºåÁÑ∂Âêé‰º†ÈÄíÊµÅÁ®ãÊï∞ÊçÆ
        """
        
        # Ëß£ÊûêË¶ÅÂ±èËîΩÁöÑÁªÑÂêçÔºåÊîØÊåÅÂ§öÁßçÂàÜÂâ≤ÊñπÂºè
        groups_list = self._parse_groups_flexible(groups_to_bypass)
        
        # ËæìÂá∫Ë∞ÉËØï‰ø°ÊÅØ
        if groups_list:
            print(f"üö´ ÊµÅÁ®ãÂ±èËîΩÁªÑ: {', '.join(groups_list)}")
            print(f"   ÂÖ±Â±èËîΩ {len(groups_list)} ‰∏™ÁªÑ")
        else:
            print("üö´ ÊµÅÁ®ãÂ±èËîΩÁªÑ: Êú™ÊåáÂÆöÁªÑÂêçÔºåË∑≥ËøáÂ±èËîΩ")
        
        # Áõ¥Êé•‰º†ÈÄíÊµÅÁ®ãËæìÂÖ•Âà∞ËæìÂá∫
        return (flow_input,)
    
    def _parse_groups_flexible(self, groups_input):
        """
        ÁÅµÊ¥ªËß£ÊûêÁªÑÂêçÔºåÊîØÊåÅÂ§öÁßçÂàÜÂâ≤ÊñπÂºèÔºö
        - Êç¢Ë°åÂàÜÂâ≤: group1\ngroup2
        - ÈÄóÂè∑ÂàÜÂâ≤: group1,group2
        - ÂàÜÂè∑ÂàÜÂâ≤: group1;group2
        - Á´ñÁ∫øÂàÜÂâ≤: group1|group2
        - Á©∫Ê†ºÂàÜÂâ≤: group1 group2 (Â§ö‰∏™ËøûÁª≠Á©∫Ê†ºËßÜ‰∏∫‰∏Ä‰∏™ÂàÜÂâ≤Á¨¶)
        - Ê∑∑ÂêàÂàÜÂâ≤: Ëá™Âä®ËØÜÂà´Âπ∂Â§ÑÁêÜ
        """
        
        if not groups_input or not groups_input.strip():
            return []
        
        groups_text = groups_input.strip()
        groups_list = []
        
        # 1. È¶ñÂÖàÊåâÊç¢Ë°åÂàÜÂâ≤
        lines = groups_text.split('\n')
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # 2. Ê£ÄÊü•ËØ•Ë°åÊòØÂê¶ÂåÖÂê´ÂÖ∂‰ªñÂàÜÂâ≤Á¨¶
            if ',' in line:
                # ÈÄóÂè∑ÂàÜÂâ≤
                parts = [part.strip() for part in line.split(',') if part.strip()]
                groups_list.extend(parts)
            elif ';' in line:
                # ÂàÜÂè∑ÂàÜÂâ≤
                parts = [part.strip() for part in line.split(';') if part.strip()]
                groups_list.extend(parts)
            elif '|' in line:
                # Á´ñÁ∫øÂàÜÂâ≤
                parts = [part.strip() for part in line.split('|') if part.strip()]
                groups_list.extend(parts)
            elif ' ' in line and len(line.split()) > 1:
                # Á©∫Ê†ºÂàÜÂâ≤ÔºàÂ§ö‰∏™ËØçÁöÑÊÉÖÂÜµÔºâ
                # ‰ΩÜË¶ÅÊéíÈô§Âçï‰∏™ÁªÑÂêç‰∏≠Èó¥ÊúâÁ©∫Ê†ºÁöÑÊÉÖÂÜµ
                words = line.split()
                if len(words) > 1:
                    # Ê£ÄÊü•ÊòØÂê¶ÁúãËµ∑Êù•ÂÉèÂ§ö‰∏™ÁªÑÂêç
                    if any(len(word) > 2 for word in words):  # ÊØè‰∏™ËØçÈïøÂ∫¶Â§ß‰∫é2ÔºåÂèØËÉΩÊòØÁªÑÂêç
                        groups_list.extend([word.strip() for word in words if word.strip()])
                    else:
                        # ÂèØËÉΩÊòØ‰∏Ä‰∏™ÁªÑÂêçÔºå‰øùÊåÅÂéüÊ†∑
                        groups_list.append(line)
                else:
                    groups_list.append(line)
            else:
                # Âçï‰∏™ÁªÑÂêç
                groups_list.append(line)
        
        # 3. ÂéªÈáçÂπ∂‰øùÊåÅÈ°∫Â∫è
        seen = set()
        unique_groups = []
        for group in groups_list:
            if group and group not in seen:
                seen.add(group)
                unique_groups.append(group)
        
        return unique_groups


NODE_CLASS_MAPPINGS = {
    "GlobalGroupConditionNode": GlobalGroupConditionNode,
    "SmartGroupSwitchNode": SmartGroupSwitchNode,
    "AdvancedGroupSwitchNode": AdvancedGroupSwitchNode,
    "FlowBypassGroupNode": FlowBypassGroupNode
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "GlobalGroupConditionNode": "ÂÖ®Â±ÄÁªÑÊù°‰ª∂ÊéßÂà∂üåêüîÄ",
    "SmartGroupSwitchNode": "Êô∫ËÉΩÁªÑÂºÄÂÖ≥üéØ",
    "AdvancedGroupSwitchNode": "È´òÁ∫ßÁªÑÂºÄÂÖ≥üîß",
    "FlowBypassGroupNode": "ÊµÅÁ®ãÂ±èËîΩÁªÑüö´"
} 