def is_context_empty(ctx):
    return not ctx or all(v is None for v in ctx.values())

def get_name(name):
    return '{}'.format(name)

class AnyType(str):
    def __ne__(self, __value: object) -> bool:
        return False

any_type = AnyType("*")

def is_none(value):
    if value is not None:
        if isinstance(value, dict) and 'model' in value and 'clip' in value:
            return is_context_empty(value)
    return value is None

def convert_to_int(value):
    try:
        return int(value)
    except ValueError:
        return None

def convert_to_float(value):
    try:
        return float(value)
    except ValueError:
        return None

def convert_to_str(value):
    return str(value)

class GlobalConditionControlNode:
    """
    ÂÖ®Â±ÄÊù°‰ª∂ÊéßÂà∂ËäÇÁÇπÔºöÊ†πÊçÆÊù°‰ª∂Âà§Êñ≠Âä®ÊÄÅÊéßÂà∂ÊâÄÊúâËäÇÁÇπÁªÑÁöÑÊâßË°åÁä∂ÊÄÅ
    ÊîØÊåÅÂ§çÊùÇÊù°‰ª∂Âà§Êñ≠ÂíåÂ§öÁßçÊéßÂà∂Ê®°Âºè
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "enable_control": ("BOOLEAN", {"default": True}),
                "input_value": (any_type,),
                "comparison_type": (["Á≠â‰∫é", "‰∏çÁ≠â‰∫é", "Â§ß‰∫é", "Â∞è‰∫é", "Â§ß‰∫éÁ≠â‰∫é", "Â∞è‰∫éÁ≠â‰∫é", "ÂåÖÂê´", "‰∏çÂåÖÂê´"], {"default": "Á≠â‰∫é"}),
                "comparison_value": ("STRING", {"default": ""}),
                "control_mode": (["Êô∫ËÉΩÊéßÂà∂", "ÂÖ®ÈÉ®ÂøΩÁï•", "ÂÖ®ÈÉ®Á¶ÅÁî®", "ÂÖ®ÈÉ®ÂêØÁî®", "Êù°‰ª∂ÊéßÂà∂"], {"default": "Êù°‰ª∂ÊéßÂà∂"}),
                "condition_true_action": (["ÂêØÁî®", "ÂøΩÁï•", "Á¶ÅÁî®"], {"default": "ÂêØÁî®"}),
                "condition_false_action": (["ÂêØÁî®", "ÂøΩÁï•", "Á¶ÅÁî®"], {"default": "Á¶ÅÁî®"}),
                "target_groups": ("STRING", {"default": "", "multiline": True, "placeholder": "ÁïôÁ©∫ÊéßÂà∂ÊâÄÊúâÁªÑÔºåÊàñËæìÂÖ•ÁªÑÂêçÔºàÊØèË°å‰∏Ä‰∏™Ôºâ"}),
                "invert_condition": ("BOOLEAN", {"default": False}),
            },
            "optional": {},
        }

    RETURN_TYPES = (any_type, "BOOLEAN", "STRING")
    RETURN_NAMES = ("ËæìÂá∫", "Êù°‰ª∂ÁªìÊûú", "ÊéßÂà∂Áä∂ÊÄÅ")
    FUNCTION = "execute"
    CATEGORY = "2üêïkaiguan"

    def execute(self, enable_control, input_value, comparison_type, comparison_value, 
                control_mode, condition_true_action, condition_false_action, 
                target_groups, invert_condition):
        
        # Â¶ÇÊûúÊéßÂà∂Ë¢´Á¶ÅÁî®ÔºåÁõ¥Êé•ËøîÂõûËæìÂÖ•ÂÄº
        if not enable_control:
            return (input_value, True, "ÊéßÂà∂Â∑≤Á¶ÅÁî®")
        
        # Ëß£ÊûêÁõÆÊ†áÁªÑÂàóË°®
        target_group_list = []
        if target_groups.strip():
            target_group_list = [group.strip() for group in target_groups.split('\n') if group.strip()]
        
        # ÊâßË°åÊù°‰ª∂Âà§Êñ≠
        condition_result = self._evaluate_condition(input_value, comparison_type, comparison_value)
        
        # Â¶ÇÊûúÈúÄË¶ÅÂèçËΩ¨Êù°‰ª∂
        if invert_condition:
            condition_result = not condition_result
        
        # Ê†πÊçÆÊéßÂà∂Ê®°ÂºèÊâßË°åÁõ∏Â∫îÊìç‰Ωú
        control_status = self._execute_control(control_mode, condition_result, 
                                             condition_true_action, condition_false_action, 
                                             target_group_list)
        
        # ÊâìÂç∞Ë∞ÉËØï‰ø°ÊÅØ
        print(f"ÂÖ®Â±ÄÊù°‰ª∂ÊéßÂà∂ËäÇÁÇπ: ËæìÂÖ•ÂÄº={input_value}, ÊØîËæÉÁ±ªÂûã={comparison_type}, "
              f"ÊØîËæÉÂÄº={comparison_value}, Êù°‰ª∂ÁªìÊûú={condition_result}, "
              f"ÊéßÂà∂Ê®°Âºè={control_mode}, ÊéßÂà∂Áä∂ÊÄÅ={control_status}")
        
        return (input_value, condition_result, control_status)
    
    def _evaluate_condition(self, input_value, comparison_type, comparison_value):
        """ËØÑ‰º∞Êù°‰ª∂Âà§Êñ≠"""
        # Â∞ÜËæìÂÖ•ÂÄºËΩ¨Êç¢‰∏∫ÂèØÊØîËæÉÁöÑÊ†ºÂºè
        if isinstance(input_value, str):
            input_str = input_value
            input_int = convert_to_int(input_value)
            input_float = convert_to_float(input_value)
        else:
            input_str = convert_to_str(input_value)
            input_int = convert_to_int(input_str) if input_value is not None else None
            input_float = convert_to_float(input_str) if input_value is not None else None
        
        # Â∞ÜÊØîËæÉÂÄºËΩ¨Êç¢‰∏∫ÂèØÊØîËæÉÁöÑÊ†ºÂºè
        comp_str = comparison_value
        comp_int = convert_to_int(comparison_value)
        comp_float = convert_to_float(comparison_value)
        
        # Ê†πÊçÆÊØîËæÉÁ±ªÂûãËøõË°åÂà§Êñ≠
        if comparison_type == "Á≠â‰∫é":
            if comp_int is not None and input_int is not None:
                return input_int == comp_int
            elif comp_float is not None and input_float is not None:
                return input_float == comp_float
            else:
                return input_str == comp_str
        
        elif comparison_type == "‰∏çÁ≠â‰∫é":
            if comp_int is not None and input_int is not None:
                return input_int != comp_int
            elif comp_float is not None and input_float is not None:
                return input_float != comp_float
            else:
                return input_str != comp_str
        
        elif comparison_type == "Â§ß‰∫é":
            if comp_int is not None and input_int is not None:
                return input_int > comp_int
            elif comp_float is not None and input_float is not None:
                return input_float > comp_float
            else:
                return input_str > comp_str
        
        elif comparison_type == "Â∞è‰∫é":
            if comp_int is not None and input_int is not None:
                return input_int < comp_int
            elif comp_float is not None and input_float is not None:
                return input_float < comp_float
            else:
                return input_str < comp_str
        
        elif comparison_type == "Â§ß‰∫éÁ≠â‰∫é":
            if comp_int is not None and input_int is not None:
                return input_int >= comp_int
            elif comp_float is not None and input_float is not None:
                return input_float >= comp_float
            else:
                return input_str >= comp_str
        
        elif comparison_type == "Â∞è‰∫éÁ≠â‰∫é":
            if comp_int is not None and input_int is not None:
                return input_int <= comp_int
            elif comp_float is not None and input_float is not None:
                return input_float <= comp_float
            else:
                return input_str <= comp_str
        
        elif comparison_type == "ÂåÖÂê´":
            return comp_str in input_str
        
        elif comparison_type == "‰∏çÂåÖÂê´":
            return comp_str not in input_str
        
        return False
    
    def _execute_control(self, control_mode, condition_result, condition_true_action, 
                        condition_false_action, target_group_list):
        """ÊâßË°åÊéßÂà∂Êìç‰Ωú"""
        
        if control_mode == "Êô∫ËÉΩÊéßÂà∂":
            # Êô∫ËÉΩÊéßÂà∂ÔºöÊ†πÊçÆÊù°‰ª∂ÁªìÊûúËá™Âä®ÈÄâÊã©ÊúÄ‰ºòÊìç‰Ωú
            if condition_result:
                action = "ÂêØÁî®"
            else:
                action = "ÂøΩÁï•"
        elif control_mode == "ÂÖ®ÈÉ®ÂøΩÁï•":
            action = "ÂøΩÁï•"
        elif control_mode == "ÂÖ®ÈÉ®Á¶ÅÁî®":
            action = "Á¶ÅÁî®"
        elif control_mode == "ÂÖ®ÈÉ®ÂêØÁî®":
            action = "ÂêØÁî®"
        elif control_mode == "Êù°‰ª∂ÊéßÂà∂":
            # Ê†πÊçÆÊù°‰ª∂ÁªìÊûúÈÄâÊã©ÂØπÂ∫îÁöÑÂä®‰Ωú
            if condition_result:
                action = condition_true_action
            else:
                action = condition_false_action
        else:
            action = "ÂêØÁî®"
        
        # ËøôÈáåËøîÂõûÊéßÂà∂Áä∂ÊÄÅÊèèËø∞ÔºåÂÆûÈôÖÁöÑÁªÑÊéßÂà∂ÈúÄË¶ÅÂú®ÂâçÁ´ØJavaScript‰∏≠ÂÆûÁé∞
        if target_group_list:
            groups_info = f"ÁõÆÊ†áÁªÑ: {', '.join(target_group_list)}"
        else:
            groups_info = "ÊâÄÊúâÁªÑ"
        
        return f"{action} - {groups_info}"


class GlobalConditionGroupControlNode:
    """
    ÂÖ®Â±ÄÊù°‰ª∂ÁªÑÊéßÂà∂ËäÇÁÇπÔºö‰∏ìÈó®Áî®‰∫éËøûÊé•Âà∞ËäÇÁÇπÁªÑÁöÑÊéßÂà∂ËäÇÁÇπ
    ‰∏éGlobalConditionControlNodeÈÖçÂêà‰ΩøÁî®
    """
    def __init__(self):
        pass
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "control_signal": ("BOOLEAN", {"default": True}),
                "control_type": (["ÂêØÁî®", "ÂøΩÁï•", "Á¶ÅÁî®"], {"default": "ÂêØÁî®"}),
            },
            "optional": {},
        }

    RETURN_TYPES = ("*",)
    FUNCTION = "process"
    CATEGORY = "2üêïkaiguan"

    def process(self, control_signal, control_type):
        """Â§ÑÁêÜÊéßÂà∂‰ø°Âè∑"""
        print(f"ÂÖ®Â±ÄÊù°‰ª∂ÁªÑÊéßÂà∂: ÊéßÂà∂‰ø°Âè∑={control_signal}, ÊéßÂà∂Á±ªÂûã={control_type}")
        return (control_signal,)


NODE_CLASS_MAPPINGS = {
    "GlobalConditionControlNode": GlobalConditionControlNode,
    "GlobalConditionGroupControlNode": GlobalConditionGroupControlNode
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "GlobalConditionControlNode": "ÂÖ®Â±ÄÊù°‰ª∂ÊéßÂà∂üåêüîÄ",
    "GlobalConditionGroupControlNode": "Êù°‰ª∂ÁªÑÊéßÂà∂üéØ"
} 